console.log("=== ANALYSE SYST√àME ANTI-R√âP√âTITION ===");

// Simuler le calcul de score comme dans matchHistoryManager.js
function simulateOpponentScore(teamName, opponentName, teamCamp, opponentCamp, matchHistory = []) {
    console.log(`\nüéØ Calcul score: ${teamName} vs ${opponentName}`);
    
    let score = 100; // Score de base
    console.log(`  ‚Ä¢ Score de base: ${score}`);
    
    // Bonus pour les √©quipes d'un autre camp
    if (teamCamp !== opponentCamp) {
        score += 50;
        console.log(`  ‚Ä¢ Bonus autre camp: +50 (total: ${score})`);
    } else {
        console.log(`  ‚Ä¢ M√™me camp: +0 (total: ${score})`);
    }
    
    // V√©rifier l'historique contre cet adversaire
    const matchesAgainstOpponent = matchHistory.filter(match => match.opponent === opponentName);
    
    if (matchesAgainstOpponent.length > 0) {
        // Simuler un num√©ro de match actuel
        const currentMatchNumber = matchHistory.length;
        const lastMatchAgainst = matchesAgainstOpponent[matchesAgainstOpponent.length - 1];
        const matchesSinceLastFaceOff = currentMatchNumber - lastMatchAgainst.matchNumber;
        
        console.log(`  ‚Ä¢ D√©j√† affront√© ${matchesAgainstOpponent.length} fois`);
        console.log(`  ‚Ä¢ Derni√®re fois: match #${lastMatchAgainst.matchNumber}`);
        console.log(`  ‚Ä¢ Matchs depuis: ${matchesSinceLastFaceOff}`);
        
        if (matchesSinceLastFaceOff === 0) {
            score -= 100;
            console.log(`  ‚Ä¢ P√âNALIT√â match pr√©c√©dent: -100 (total: ${score})`);
        } else if (matchesSinceLastFaceOff === 1) {
            score -= 80;
            console.log(`  ‚Ä¢ P√âNALIT√â 1 match √©coul√©: -80 (total: ${score})`);
        } else if (matchesSinceLastFaceOff === 2) {
            score -= 50;
            console.log(`  ‚Ä¢ P√âNALIT√â 2 matchs √©coul√©s: -50 (total: ${score})`);
        } else if (matchesSinceLastFaceOff >= 3 && matchesSinceLastFaceOff <= 5) {
            score -= 20;
            console.log(`  ‚Ä¢ P√©nalit√© 3-5 matchs √©coul√©s: -20 (total: ${score})`);
        } else {
            console.log(`  ‚Ä¢ Pas de p√©nalit√© (${matchesSinceLastFaceOff} matchs): +0 (total: ${score})`);
        }
    } else {
        score += 30;
        console.log(`  ‚Ä¢ Bonus JAMAIS affront√©: +30 (total: ${score})`);
    }
    
    // Simuler bonus temps d'attente (comme dans ton log ~0.37)
    const waitBonus = 0.37;
    score += waitBonus;
    console.log(`  ‚Ä¢ Bonus temps d'attente: +${waitBonus} (total: ${score.toFixed(2)})`);
    
    const finalScore = Math.max(score, 1);
    console.log(`  üéØ SCORE FINAL: ${finalScore.toFixed(2)}`);
    
    // Cat√©goriser
    if (finalScore >= 130) {
        console.log(`  ‚úÖ Cat√©gorie: EXCELLENT (priorit√© maximale)`);
    } else if (finalScore >= 80) {
        console.log(`  ‚≠ê Cat√©gorie: BON (priorit√© √©lev√©e)`);
    } else if (finalScore >= 50) {
        console.log(`  ‚ö†Ô∏è Cat√©gorie: OK (priorit√© mod√©r√©e)`);
    } else {
        console.log(`  ‚ùå Cat√©gorie: DERNIER RECOURS`);
    }
    
    return finalScore;
}

console.log("=== SIMULATION BAS√âE SUR TON LOG ===");
console.log("Log: 'Scores de matchmaking pour onazelf: macfly: 180.37936666666667'");

// Simuler onazelf vs macfly avec ton score exact
console.log("\nüìä SC√âNARIO: Premi√®re confrontation, camps diff√©rents");
simulateOpponentScore("onazelf", "macfly", "Team Shiver", "Team Frye", []);

console.log("\nüìä SC√âNARIO: Apr√®s 1 match ensemble");
const historyAfter1Match = [
    { opponent: "macfly", matchNumber: 0, timestamp: Date.now() - 3600000 }
];
simulateOpponentScore("onazelf", "macfly", "Team Shiver", "Team Frye", historyAfter1Match);

console.log("\nüìä SC√âNARIO: Apr√®s 3 matchs (avec d'autres √©quipes entre)");
const historyAfter3Matches = [
    { opponent: "macfly", matchNumber: 0, timestamp: Date.now() - 3600000 },
    { opponent: "autre_equipe", matchNumber: 1, timestamp: Date.now() - 1800000 },
    { opponent: "autre_equipe2", matchNumber: 2, timestamp: Date.now() - 900000 }
];
simulateOpponentScore("onazelf", "macfly", "Team Shiver", "Team Frye", historyAfter3Matches);

console.log("\nüìà EXPLICATION DU SCORE 180.37:");
console.log("  100 (base) + 50 (autre camp) + 30 (jamais affront√©) + 0.37 (attente) = 180.37");
console.log("  ‚úÖ C'est un score EXCELLENT qui encourage les matchs inter-camps");

console.log("\nüîß SYST√àME ANTI-R√âP√âTITION:");
console.log("  ‚Ä¢ Priorit√© 1: Autres camps jamais affront√©s (score ~180)");
console.log("  ‚Ä¢ Priorit√© 2: M√™me camp jamais affront√© (score ~130)");
console.log("  ‚Ä¢ Priorit√© 3: Autres camps +3 matchs √©coul√©s (score ~130)");
console.log("  ‚Ä¢ Priorit√© 4: √âquipes affront√©es r√©cemment (score < 50)");

console.log("\nüéØ CONCLUSION:");
console.log("  Le syst√®me fonctionne correctement ! Score 180.37 = match optimal");
console.log("  Plus tu as d'√©quipes, plus le syst√®me sera efficace pour √©viter les r√©p√©titions");