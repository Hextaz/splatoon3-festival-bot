const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('diagnostic-cleanup')
        .setDescription('[ADMIN] Diagnostiquer et nettoyer les duplications')
        .addSubcommand(subcommand =>
            subcommand
                .setName('check')
                .setDescription('V√©rifier l\'√©tat des donn√©es sans les modifier'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('cleanup-duplicates')
                .setDescription('Nettoyer uniquement les duplications (sans supprimer les donn√©es valides)'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('full-cleanup')
                .setDescription('‚ö†Ô∏è Nettoyage complet de toutes les donn√©es de festival'))
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageGuild),

    category: 'admin',
    cooldown: 5,

    async execute(interaction) {
        try {
            const guildId = interaction.guildId;
            const subcommand = interaction.options.getSubcommand();
            
            console.log(`üîß [DIAGNOSTIC] Commande: ${subcommand} pour guild: ${guildId}`);

            // Importer le nettoyeur robuste
            const RobustCleaner = require('../utils/robustCleaner');
            const cleaner = new RobustCleaner(guildId);

            await interaction.deferReply({ ephemeral: true });

            if (subcommand === 'check') {
                // üîç DIAGNOSTIC UNIQUEMENT
                console.log(`üîç Diagnostic en cours...`);
                const diagnostic = await cleaner.diagnose();
                
                const embed = new EmbedBuilder()
                    .setTitle('üîç Diagnostic des donn√©es')
                    .setColor('#3498db')
                    .setTimestamp();

                let description = `**√âtat des collections:**\n`;
                description += `‚Ä¢ Teams: ${diagnostic.teams.total} (${diagnostic.teams.duplicates} duplications)\n`;
                description += `‚Ä¢ Matches: ${diagnostic.matches.total} (${diagnostic.matches.duplicates} duplications)\n`;
                description += `‚Ä¢ Votes: ${diagnostic.votes.total}\n`;
                description += `‚Ä¢ Festival: ${diagnostic.festival ? 'Actif' : 'Inactif'}\n\n`;

                if (diagnostic.teams.duplicates > 0 || diagnostic.matches.duplicates > 0) {
                    description += `‚ö†Ô∏è **Duplications d√©tect√©es !**\n`;
                    description += `Utilisez \`/diagnostic-cleanup cleanup-duplicates\` pour les nettoyer.`;
                    embed.setColor('#e74c3c');
                } else {
                    description += `‚úÖ **Aucune duplication d√©tect√©e**`;
                    embed.setColor('#27ae60');
                }

                embed.setDescription(description);
                
                await interaction.editReply({ embeds: [embed] });
                console.log(`‚úÖ Diagnostic termin√©`);

            } else if (subcommand === 'cleanup-duplicates') {
                // üßπ NETTOYAGE INTELLIGENT DES DUPLICATIONS
                console.log(`üßπ Nettoyage des duplications...`);
                const results = await cleaner.cleanupDuplicatesOnly();
                
                const embed = new EmbedBuilder()
                    .setTitle('üßπ Nettoyage des duplications')
                    .setColor('#f39c12')
                    .setTimestamp();

                let description = `**R√©sultats du nettoyage:**\n`;
                description += `‚Ä¢ Teams supprim√©es: ${results.teams.deleted}\n`;
                description += `‚Ä¢ Matches supprim√©s: ${results.matches.deleted}\n`;
                description += `‚Ä¢ Votes nettoy√©s: ${results.votes.deleted}\n\n`;

                if (results.teams.deleted > 0 || results.matches.deleted > 0) {
                    description += `‚úÖ **Duplications supprim√©es avec succ√®s !**`;
                    embed.setColor('#27ae60');
                } else {
                    description += `‚ÑπÔ∏è **Aucune duplication trouv√©e √† nettoyer**`;
                    embed.setColor('#3498db');
                }

                embed.setDescription(description);
                
                await interaction.editReply({ embeds: [embed] });
                console.log(`‚úÖ Nettoyage des duplications termin√©:`, results);

            } else if (subcommand === 'full-cleanup') {
                // ‚ö†Ô∏è NETTOYAGE COMPLET
                console.log(`‚ö†Ô∏è Nettoyage complet demand√©...`);
                const results = await cleaner.cleanupGuild();
                
                const embed = new EmbedBuilder()
                    .setTitle('‚ö†Ô∏è Nettoyage complet effectu√©')
                    .setColor('#e74c3c')
                    .setTimestamp();

                let description = `**Donn√©es supprim√©es:**\n`;
                description += `‚Ä¢ Teams: ${results.teams.deleted}\n`;
                description += `‚Ä¢ Matches: ${results.matches.deleted}\n`;
                description += `‚Ä¢ Votes: ${results.votes.deleted}\n`;
                description += `‚Ä¢ Festival: ${results.festival.deleted ? 'Supprim√©' : 'Non trouv√©'}\n\n`;
                description += `üîÑ **Toutes les donn√©es de festival ont √©t√© effac√©es**`;

                embed.setDescription(description);
                
                await interaction.editReply({ embeds: [embed] });
                console.log(`‚ö†Ô∏è Nettoyage complet termin√©:`, results);
            }

        } catch (error) {
            console.error('‚ùå [DIAGNOSTIC] Erreur:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå Erreur de diagnostic')
                .setDescription(`Une erreur s'est produite: ${error.message}`)
                .setColor('#e74c3c')
                .setTimestamp();

            if (interaction.deferred) {
                await interaction.editReply({ embeds: [errorEmbed] });
            } else {
                await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
            }
        }
    }
};