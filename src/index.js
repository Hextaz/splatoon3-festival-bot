require('dotenv').config();
const fs = require('fs');
const path = require('path');
const { Client, Collection, GatewayIntentBits } = require('discord.js');
const { botToken } = require('./config');
const deployCommands = require('./deploy-commands');
const interactionCreateEvent = require('./events/interactionCreate');
const readyEvent = require('./events/ready');
const festivalManager = require('./utils/festivalManager');
const teamManager = require('./utils/teamManager');
const scoreTracker = require('./utils/scoreTracker');
const { SmartSleepManager } = require('./utils/smartSleep');
const { HealthServer } = require('./utils/healthServer');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.DirectMessages
    ]
});

global.client = client;

// Initialiser le syst√®me de veille intelligente et le serveur de sant√©
const smartSleepManager = new SmartSleepManager();
const healthServer = new HealthServer();

// Rendre les instances disponibles globalement
global.smartSleepManager = smartSleepManager;
global.healthServer = healthServer;

// Cr√©er une collection pour les commandes
client.commands = new Collection();
const commandsPath = path.join(__dirname, 'commands');
const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

// Charger chaque fichier de commande dans la collection
for (const file of commandFiles) {
    const filePath = path.join(commandsPath, file);
    const command = require(filePath);
    
    if ('data' in command && 'execute' in command) {
        client.commands.set(command.data.name, command);
    } else {
        console.log(`[WARNING] The command at ${filePath} is missing a required "data" or "execute" property.`);
    }
}

client.once('ready', () => {
    readyEvent.execute(client);
    
    // V√©rification du nombre de serveurs
    checkGuildLimits();
});

client.on('interactionCreate', interaction => {
    interactionCreateEvent.execute(interaction);
});

client.tempTeamData = {};

// Deploy slash commands
deployCommands();

// V√©rification des limites de serveurs
function checkGuildLimits() {
    const config = require('./config');
    const guilds = client.guilds.cache;
    
    console.log(`üè∞ Bot connect√© √† ${guilds.size} serveur(s) Discord`);
    
    // V√©rifier la limite de serveurs
    if (config.maxGuilds && guilds.size > config.maxGuilds) {
        console.error(`‚ùå LIMITE D√âPASS√âE: Le bot est connect√© √† ${guilds.size} serveurs mais la limite est de ${config.maxGuilds}.`);
        console.error('‚ö†Ô∏è  Ce bot est con√ßu pour un seul serveur √† la fois pour √©viter les conflits de donn√©es.');
        console.error('üìã Serveurs connect√©s:');
        guilds.forEach(guild => {
            console.error(`   - ${guild.name} (${guild.id})`);
        });
        console.error('üîß Solution: Retirez le bot des serveurs suppl√©mentaires ou configurez ALLOWED_GUILD_ID');
        
        // Optionnel: Quitter automatiquement les serveurs suppl√©mentaires
        if (config.allowedGuildId) {
            guilds.forEach(async (guild) => {
                if (guild.id !== config.allowedGuildId) {
                    console.log(`üö™ Quittant automatiquement le serveur: ${guild.name} (${guild.id})`);
                    try {
                        await guild.leave();
                    } catch (error) {
                        console.error(`‚ùå Erreur en quittant ${guild.name}:`, error);
                    }
                }
            });
        }
    }
    
    // V√©rifier le serveur autoris√© sp√©cifique
    if (config.allowedGuildId) {
        const allowedGuild = guilds.get(config.allowedGuildId);
        if (!allowedGuild) {
            console.error(`‚ùå ERREUR: Le bot n'est pas connect√© au serveur autoris√© (${config.allowedGuildId})`);
        } else {
            console.log(`‚úÖ Bot correctement connect√© au serveur autoris√©: ${allowedGuild.name}`);
        }
    }
    
    // Afficher les serveurs actuels
    if (guilds.size > 0) {
        console.log('üìã Serveurs Discord connect√©s:');
        guilds.forEach(guild => {
            const isAllowed = !config.allowedGuildId || guild.id === config.allowedGuildId;
            const status = isAllowed ? '‚úÖ' : '‚ö†Ô∏è';
            console.log(`   ${status} ${guild.name} (${guild.id}) - ${guild.memberCount} membres`);
        });
    }
}

// Chargement des donn√©es au d√©marrage
async function loadAllData() {
    try {
        // Charger les donn√©es du festival
        const festival = await festivalManager.loadFestival();

        // NOUVELLE V√âRIFICATION COMPL√àTE DU STATUT DU FESTIVAL
        if (festival) {
            const now = new Date();
            const startDate = new Date(festival.startDate);
            const endDate = new Date(festival.endDate);
            
            console.log('=== V√âRIFICATION STATUT FESTIVAL AU D√âMARRAGE ===');
            console.log('Festival:', festival.title);
            console.log('Maintenant:', now.toISOString());
            console.log('D√©but:', startDate.toISOString());
            console.log('Fin:', endDate.toISOString());
            console.log('Actuellement actif:', festival.isActive);
            
            // NOUVEAU : D√©terminer l'√©tat exact
            let festivalState = '';
            if (endDate < now) {
                festivalState = 'üèÅ TERMIN√â';
            } else if (now >= startDate && now <= endDate) {
                festivalState = festival.isActive ? 'üéâ ACTIF' : '‚è∏Ô∏è EN COURS MAIS PAS ACTIV√â';
            } else if (startDate > now) {
                festivalState = 'üìÖ FUTUR/PR√âPARATION';
            }
            
            console.log('√âtat du festival:', festivalState);
            console.log('Action recommand√©e pour les √©quipes:', 
                festivalState.includes('TERMIN√â') ? 'SUPPRIMER' : 'CONSERVER');
            
            // CAS 1: Festival termin√© (fin < maintenant)
            if (endDate < now) {
                console.log('üèÅ FESTIVAL TERMIN√â D√âTECT√â au d√©marrage');
                
                if (festival.isActive) {
                    console.log('‚ö†Ô∏è Festival encore marqu√© comme actif, d√©sactivation...');
                    festival.deactivate();
                    await festivalManager.saveFestival(festival);
                }
                
                // Envoyer l'annonce de fin si le bot √©tait √©teint pendant la fin
                if (client.guilds.cache.size > 0) {
                    const guild = client.guilds.cache.first();
                    try {
                        const channel = await guild.channels.fetch(festival.announcementChannelId);
                        if (channel) {
                            const config = await require('./commands/config').loadConfig();
                            const mentionText = config.announcementRoleId ? 
                                `<@&${config.announcementRoleId}> ` : '';
                            

                            const endEmbed = festivalManager.createEndEmbed(festival);
                            await channel.send({
                                content: `${mentionText}üèÅ **LE FESTIVAL "${festival.title}" EST TERMIN√â !** üèÅ`,
                                embeds: [endEmbed]
                            });
                            
                            console.log('‚úÖ Annonce de fin envoy√©e (rattrapage)');
                        }
                    } catch (error) {
                        console.error('‚ùå Erreur envoi annonce fin rattrapage:', error);
                    }
                }
                
                // Programmer le nettoyage complet dans 30 secondes
                console.log('‚è∞ Programmation du nettoyage dans 30 secondes...');
                setTimeout(async () => {
                    console.log('üßπ D√âBUT DU NETTOYAGE AUTOMATIQUE');
                    const guild = client.guilds.cache.size > 0 ? client.guilds.cache.first() : null;
                    
                    await festivalManager.resetFestivalData(guild);
                    const teamManager = require('./utils/teamManager');
                    await teamManager.clearAllTeams();
                    await festivalManager.deleteFestival();
                    
                    console.log('‚úÖ Festival termin√© nettoy√© automatiquement');
                }, 30000);
            }
            // CAS 2: Festival en cours (d√©but < maintenant < fin)
            else if (now >= startDate && now <= endDate) {
                if (!festival.isActive) {
                    console.log('üéâ AUTO-ACTIVATION du festival en cours');
                    festival.activate();
                    await festivalManager.saveFestival(festival);
                    
                    // Envoyer l'annonce de d√©but si le bot √©tait √©teint pendant le d√©but
                    if (client.guilds.cache.size > 0) {
                        const guild = client.guilds.cache.first();
                        try {
                            const channel = await guild.channels.fetch(festival.announcementChannelId);
                            if (channel) {
                                const config = await require('./commands/config').loadConfig();
                                const mentionText = config.announcementRoleId ? 
                                    `<@&${config.announcementRoleId}> ` : '';
                                
                                const startEmbed = festivalManager.createStartEmbed(festival);
                                await channel.send({
                                    content: `${mentionText}üéâ **LE FESTIVAL COMMENCE MAINTENANT !** üéâ`,
                                    embeds: [startEmbed]
                                });
                                
                                console.log('‚úÖ Annonce de d√©but envoy√©e (rattrapage)');
                            }
                        } catch (error) {
                            console.error('‚ùå Erreur envoi annonce d√©but rattrapage:', error);
                        }
                    }
                }
                
                // Programmer la d√©sactivation pour la fin
                festivalManager.scheduleActivation(festival, client);
            }
            // CAS 3: Festival futur (d√©but > maintenant)
            else if (startDate > now) {
                console.log('üìÖ Festival futur, programmation normale');
                festivalManager.scheduleActivation(festival, client);
            }
            
            console.log('=== FIN V√âRIFICATION STATUT FESTIVAL ===');
        }

        // Charger les autres donn√©es
        await teamManager.loadTeams();
        teamManager.cleanupCorruptedTeams();

        // Charger l'historique des matchs
        const matchHistoryManager = require('./utils/matchHistoryManager');
        await matchHistoryManager.loadMatchHistory();
        console.log('‚úÖ Historique des matchs charg√©');
        
        // V√©rifier et nettoyer les salons de match
        const { verifyAndCleanupMatchChannels } = require('./utils/matchSearch');
        if (client.guilds.cache.size > 0) {
            const guild = client.guilds.cache.first();
            try {
                const cleanupResult = await verifyAndCleanupMatchChannels(guild);
                if (cleanupResult) {
                    console.log('‚úÖ V√©rification des salons de match termin√©e');
                }
            } catch (error) {
                console.error('‚ùå Erreur lors de la v√©rification des salons de match:', error);
            }
        }
        
        const { loadVotes } = require('./utils/vote');
        await loadVotes();
        await scoreTracker.loadScores();

        // V√©rification et synchronisation des √©quipes existantes
        const verifyTeamsAndRoles = async (guild) => {
            try {
                const teams = teamManager.getAllTeams();
                
                if (teams.length > 0) {
                    console.log(`${teams.length} √©quipes trouv√©es au d√©marrage, v√©rification...`);
                    
                    const festival = festivalManager.getCurrentFestival();
                    
                    if (festival) {
                        // FESTIVAL EXISTE (peu importe s'il est actif ou non)
                        if (festival.isActive) {
                            console.log('‚úÖ Festival actif trouv√©, synchronisation des r√¥les...');
                            await syncAllRoles();
                        } else {
                            const now = new Date();
                            const startDate = new Date(festival.startDate);
                            const endDate = new Date(festival.endDate);
                            
                            if (endDate < now) {
                                // Festival r√©ellement termin√©
                                console.log('‚ùå Festival termin√© d√©tect√©, nettoyage des √©quipes...');
                                await festivalManager.resetFestivalData(guild);
                                await teamManager.clearAllTeams();
                                console.log('‚úÖ Nettoyage forc√© termin√©');
                            } else if (startDate > now) {
                                // Festival futur - GARDER LES √âQUIPES
                                console.log('üìÖ Festival futur d√©tect√©, conservation des √©quipes existantes');
                                console.log('üîÑ Synchronisation des r√¥les pour les √©quipes existantes...');
                                await syncAllRoles();
                                console.log('‚úÖ √âquipes conserv√©es et r√¥les synchronis√©s');
                            } else {
                                // Festival en cours mais pas activ√©
                                console.log('üéâ Festival en cours mais pas activ√©, synchronisation...');
                                await syncAllRoles();
                            }
                        }
                    } else {
                        // AUCUN FESTIVAL N'EXISTE
                        console.log('‚ùå Aucun festival trouv√© mais des √©quipes existent');
                        
                        // V√©rifier si les √©quipes ont encore leurs membres avec les bons r√¥les
                        let teamsWithValidMembers = 0;
                        let emptyTeams = 0;
                        
                        for (const team of teams) {
                            if (team.members && team.members.length > 0) {
                                const teamRole = guild.roles.cache.find(role => role.name === `Team ${team.name}`);
                                let membersWithRole = 0;
                                
                                if (teamRole) {
                                    for (const memberId of team.members) {
                                        try {
                                            const member = await guild.members.fetch(memberId);
                                            if (member && member.roles.cache.has(teamRole.id)) {
                                                membersWithRole++;
                                            }
                                        } catch (error) {
                                            console.log(`Membre ${memberId} non trouv√© dans la guild`);
                                        }
                                    }
                                }
                                
                                if (membersWithRole > 0) {
                                    teamsWithValidMembers++;
                                } else {
                                    emptyTeams++;
                                }
                            } else {
                                emptyTeams++;
                            }
                        }
                        
                        if (teamsWithValidMembers === 0) {
                            console.log('üßπ Aucun festival et aucune √©quipe valide, nettoyage complet...');
                            await festivalManager.resetFestivalData(guild);
                            await teamManager.clearAllTeams();
                            console.log('‚úÖ Nettoyage forc√© termin√©');
                        } else {
                            console.log('‚ö†Ô∏è √âquipes valides trouv√©es sans festival, conservation temporaire...');
                            console.log('üîÑ Synchronisation des r√¥les...');
                            await syncAllRoles();
                            console.log('‚úÖ √âquipes conserv√©es temporairement');
                        }
                    }
                } else {
                    console.log('üìù Aucune √©quipe trouv√©e au d√©marrage');
                }
            } catch (error) {
                console.error('‚ùå Erreur lors de la v√©rification des √©quipes au d√©marrage:', error);
            }
        };

        if (client.guilds.cache.size > 0) {
            const guild = client.guilds.cache.first();
            await verifyTeamsAndRoles(guild);
        }
        
        console.log('‚úÖ Toutes les donn√©es charg√©es avec succ√®s');
        
        // D√©marrer le syst√®me de veille intelligente
        console.log('üõ°Ô∏è D√©marrage du syst√®me de veille intelligente...');
        healthServer.start();
        smartSleepManager.start();
        console.log('‚úÖ Syst√®me de veille intelligente d√©marr√©');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du chargement des donn√©es:', error);
    }
}

async function syncAllRoles() {
    console.log('üîÑ D√âBUT DE LA SYNCHRONISATION DES R√îLES');
    
    if (client.guilds.cache.size === 0) {
        console.log('Aucune guild disponible pour la synchronisation');
        return;
    }
    
    const guild = client.guilds.cache.first();
    const teamManager = require('./utils/teamManager');
    const teams = teamManager.getAllTeams();
    
    if (teams.length === 0) {
        console.log('Aucune √©quipe √† synchroniser');
        return;
    }
    
    console.log(`Synchronisation de ${teams.length} √©quipes...`);
    
    // R√©cup√©rer ou cr√©er le r√¥le Team Leader
    let leaderRole = guild.roles.cache.find(role => role.name === 'Team Leader');
    if (!leaderRole) {
        try {
            leaderRole = await guild.roles.create({
                name: 'Team Leader',
                color: '#FFD700',
                permissions: [],
                reason: 'Cr√©ation du r√¥le Team Leader au red√©marrage'
            });
            console.log('‚úÖ R√¥le Team Leader cr√©√©');
        } catch (error) {
            console.error('‚ùå Erreur cr√©ation r√¥le Team Leader:', error);
        }
    }
    
    // Synchroniser chaque √©quipe
    for (const team of teams) {
        try {
            console.log(`Synchronisation √©quipe: ${team.name}`);
            
            // 1. R√©cup√©rer ou cr√©er le r√¥le d'√©quipe
            const { getOrCreateTeamRole } = require('./utils/channelManager');
            const teamRole = await getOrCreateTeamRole(guild, team);
            
            if (!teamRole) {
                console.error(`‚ùå Impossible de cr√©er/r√©cup√©rer le r√¥le pour ${team.name}`);
                continue;
            }
            
            // 2. Synchroniser tous les membres de l'√©quipe
            for (const memberId of team.members) {
                try {
                    const member = await guild.members.fetch(memberId);
                    if (member) {
                        // Ajouter le r√¥le d'√©quipe s'il ne l'a pas
                        if (!member.roles.cache.has(teamRole.id)) {
                            await member.roles.add(teamRole);
                            console.log(`‚ûï R√¥le d'√©quipe ajout√© √† ${member.user.username}`);
                        }
                        
                        // Ajouter le r√¥le de leader si c'est le capitaine
                        if (team.isLeader(memberId) && leaderRole && !member.roles.cache.has(leaderRole.id)) {
                            await member.roles.add(leaderRole);
                            console.log(`üëë R√¥le Team Leader ajout√© √† ${member.user.username}`);
                        }
                        
                        // Retirer le r√¥le de leader si ce n'est plus le capitaine
                        if (!team.isLeader(memberId) && leaderRole && member.roles.cache.has(leaderRole.id)) {
                            await member.roles.remove(leaderRole);
                            console.log(`üëë R√¥le Team Leader retir√© de ${member.user.username}`);
                        }
                    }
                } catch (memberError) {
                    console.error(`‚ùå Erreur pour le membre ${memberId}:`, memberError);
                }
                
                // Pause pour √©viter le rate limiting
                await new Promise(resolve => setTimeout(resolve, 200));
            }
            
            console.log(`‚úÖ √âquipe ${team.name} synchronis√©e`);
        } catch (error) {
            console.error(`‚ùå Erreur lors de la synchronisation de l'√©quipe ${team.name}:`, error);
        }
    }
    
    console.log('‚úÖ Synchronisation des r√¥les termin√©e');
}

// D√©marrer le chargement des donn√©es
loadAllData();

// Gestionnaire d'arr√™t propre
process.on('SIGINT', () => {
    console.log('üõë Arr√™t du bot d√©tect√©...');
    if (global.smartSleepManager) {
        global.smartSleepManager.stop();
    }
    if (global.healthServer) {
        global.healthServer.stop();
    }
    console.log('‚úÖ Ressources nettoy√©es');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('üõë Arr√™t du bot d√©tect√© (SIGTERM)...');
    if (global.smartSleepManager) {
        global.smartSleepManager.stop();
    }
    if (global.healthServer) {
        global.healthServer.stop();
    }
    console.log('‚úÖ Ressources nettoy√©es');
    process.exit(0);
});

// Connexion du client Discord
client.login(botToken);