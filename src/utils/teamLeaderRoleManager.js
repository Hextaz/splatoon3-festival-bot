/**
 * Utilitaire centralis√© pour la gestion du r√¥le Team Leader
 * √âvite la duplication de code et les cr√©ations multiples
 */

/**
 * R√©cup√®re ou cr√©e le r√¥le Team Leader pour une guild
 * @param {Guild} guild - L'objet guild Discord
 * @returns {Promise<Role>} Le r√¥le Team Leader
 */
async function ensureTeamLeaderRole(guild) {
    // D'abord chercher le r√¥le existant
    let leaderRole = guild.roles.cache.find(role => role.name === 'Team Leader');
    
    if (leaderRole) {
        console.log(`‚úÖ R√¥le Team Leader trouv√©: ${leaderRole.id}`);
        return leaderRole;
    }
    
    // Si pas trouv√©, le cr√©er
    try {
        leaderRole = await guild.roles.create({
            name: 'Team Leader',
            color: '#FFD700', // Couleur dor√©e pour les leaders
            permissions: [],
            reason: 'R√¥le pour les leaders d\'√©quipe - cr√©√© automatiquement'
        });
        
        console.log(`‚úÖ R√¥le Team Leader cr√©√©: ${leaderRole.id}`);
        return leaderRole;
        
    } catch (error) {
        console.error('‚ùå Erreur cr√©ation r√¥le Team Leader:', error);
        throw new Error(`Impossible de cr√©er le r√¥le Team Leader: ${error.message}`);
    }
}

/**
 * Attribue le r√¥le Team Leader √† un membre
 * @param {GuildMember} member - Le membre √† qui attribuer le r√¥le
 * @param {Guild} guild - L'objet guild Discord
 * @returns {Promise<boolean>} True si succ√®s
 */
async function assignTeamLeaderRole(member, guild) {
    try {
        const leaderRole = await ensureTeamLeaderRole(guild);
        
        if (!member.roles.cache.has(leaderRole.id)) {
            await member.roles.add(leaderRole);
            console.log(`üëë R√¥le Team Leader attribu√© √† ${member.user.username}`);
        } else {
            console.log(`üëë ${member.user.username} a d√©j√† le r√¥le Team Leader`);
        }
        
        return true;
    } catch (error) {
        console.error(`‚ùå Erreur attribution r√¥le Team Leader √† ${member.user.username}:`, error);
        return false;
    }
}

/**
 * Retire le r√¥le Team Leader d'un membre
 * @param {GuildMember} member - Le membre √† qui retirer le r√¥le
 * @param {Guild} guild - L'objet guild Discord
 * @returns {Promise<boolean>} True si succ√®s
 */
async function removeTeamLeaderRole(member, guild) {
    try {
        const leaderRole = guild.roles.cache.find(role => role.name === 'Team Leader');
        
        if (leaderRole && member.roles.cache.has(leaderRole.id)) {
            await member.roles.remove(leaderRole);
            console.log(`üëë R√¥le Team Leader retir√© de ${member.user.username}`);
        }
        
        return true;
    } catch (error) {
        console.error(`‚ùå Erreur retrait r√¥le Team Leader de ${member.user.username}:`, error);
        return false;
    }
}

/**
 * Nettoie compl√®tement le r√¥le Team Leader (retire de tous les membres et supprime le r√¥le)
 * @param {Guild} guild - L'objet guild Discord
 * @returns {Promise<boolean>} True si succ√®s
 */
async function cleanupTeamLeaderRole(guild) {
    try {
        console.log('üßπ Nettoyage du r√¥le Team Leader...');
        const leaderRole = guild.roles.cache.find(role => role.name === 'Team Leader');
        
        if (!leaderRole) {
            console.log('‚ÑπÔ∏è Aucun r√¥le Team Leader √† nettoyer');
            return true;
        }
        
        // Retirer le r√¥le de tous les membres
        const membersWithLeaderRole = guild.members.cache.filter(member => 
            member.roles.cache.has(leaderRole.id)
        );
        
        console.log(`üë• ${membersWithLeaderRole.size} membre(s) avec le r√¥le Team Leader`);
        
        for (const [memberId, member] of membersWithLeaderRole) {
            try {
                await member.roles.remove(leaderRole);
                console.log(`üëë R√¥le Team Leader retir√© de ${member.user.username}`);
            } catch (e) {
                console.error(`‚ùå Erreur retrait r√¥le Team Leader pour ${member.user.username}:`, e);
            }
            
            // Pause pour √©viter le rate limiting
            await new Promise(resolve => setTimeout(resolve, 200));
        }
        
        // Supprimer le r√¥le compl√®tement
        try {
            await leaderRole.delete('Nettoyage du r√¥le Team Leader');
            console.log('üóëÔ∏è R√¥le Team Leader supprim√© compl√®tement');
        } catch (e) {
            console.error('‚ùå Erreur suppression r√¥le Team Leader:', e);
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale nettoyage r√¥le Team Leader:', error);
        return false;
    }
}

module.exports = {
    ensureTeamLeaderRole,
    assignTeamLeaderRole,
    removeTeamLeaderRole,
    cleanupTeamLeaderRole
};